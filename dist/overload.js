var k=new Map([["number","Number"],["string","String"],["boolean","Boolean"],["symbol","Symbol"],["bigint","BigInt"],["undefined","(undefined)"]]);function d(e,o){if(Array.isArray(o)){for(let i=0;i<o.length;i++)if(d(e,o[i]))return!0;return!1}if(typeof o!="function")return o==="*"&&e!==null||o==="..."||o===null&&e===null||o===typeof e;switch(typeof e){case"function":case"object":break;default:e=Object(e);break}return e instanceof o||e===o}function E(e){if(e===null)return"null";if(e==="*")return"(any)";let o=typeof e;if(o in k)return k.get(o);let i=e.name||e.constructor.name;return o==="function"&&i==="anonymous"?"(anonymous)":i}function N(e,o){let i=new Map,h=null;function A(...t){if(h)return h.apply(this,t);$(new Error,t)}function $(t,l){let n=t.stack.split(`
`).splice(3),r="",f=`
`,g="";n.forEach((u,a,y)=>{let c=u.trim().split(" "),T=c.length===3?c[1]:"(anonymous)",m=T.split(".").pop();y[a]={fullMethodName:T,methodName:m,link:c.length===3?c[2]:c[1]},a?f+=`${m}	${y[a].link}
`:g=m});let b=Array.from(i.keys()).find(u=>u.length===l.length);if(!b)throw r+=`The function "${g}" does not have an overload that takes ${l.length} arguments.`,r+=f,new Error(r);let w=!1;if(b.forEach((u,a)=>{if(!d(l[a],u)){let y=Array.isArray(u)?u.map(E).join("\u3001"):E(u);r+=`${w?`
`:""}Argument ${a+1}: Cannot convert from "${E(l[a])}" to "${y}".`,w=!0}}),w)throw r=`Error calling function "${g}"
${r}`,r+=f,new Error(r)}function s(...t){if(!i.size)return A.apply(this,t);let l=Array.from(i.keys()).filter(n=>n.length===t.length||n[n.length-1]==="...");n:for(let n=0;n<l.length;n++){let r=l[n];if(typeof r[0]<"u"&&r[0]!=="..."&&t.length===0)continue n;for(let f=0;f<t.length;f++)if(!d(t[f],r[f]||r[r.length-1]))continue n;return i.get(r).apply(this,t)}return A.apply(this,t)}if(s.add=function(t,l){if(!Array.isArray(t))throw new TypeError('"types" must be an array.');if(typeof l!="function")throw new TypeError('"fn" must be a function.');for(let n=0;n<t.length;n++)if(t[n]==="..."&&n!==t.length-1)throw new Error('A "..." parameter must be the last parameter in a formal parameter list.');return i.size&&Array.from(i.keys()).forEach(n=>{if(n.length===t.length){for(let r=0;r<n.length;r++)if(n[r]!==t[r])return;throw new Error("Function with the same signature already exists.")}}),t.forEach(n=>{let r=Array.isArray(n);if(typeof n!="function"&&!r&&n!=="*"&&n!=="...")throw new Error('The expected type must be Class, Array, "*" or the last parameter type can also be "...".');if(r){for(let f=0;f<n.length;f++)if(typeof n[f]!="function"&&n[f]!==null&&n[f]!=="*")throw new Error('The predetermined type enumeration content must be a Class, null or "*".')}}),i.set(t,l),s},s.any=function(t){if(typeof t!="function")throw new TypeError('"fn" must be a function.');if(h)throw new Error('"any" function is already defined.');return h=t,s},Array.isArray(e)&&typeof o=="function")s.add(e,o);else if(e||o)throw new TypeError('"defaultTypes" must be an array and "defaultFn" must be a function.');return s}export{N as default};
//# sourceMappingURL=overload.js.map
