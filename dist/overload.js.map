{
  "version": 3,
  "sources": ["../src/overload.js"],
  "sourcesContent": ["/**\r\n * \u7C7B\u578B\u540D\u79F0\u6620\u5C04\u8868\r\n * @type {Map<String, String>}\r\n */\r\nconst TYPE_NAMES = {\r\n  number: \"Number\",\r\n  string: \"String\",\r\n  boolean: \"Boolean\",\r\n  symbol: \"Symbol\",\r\n  bigint: \"BigInt\",\r\n  undefined: \"(undefined)\",\r\n};\r\n\r\nconst UNDEFINED_STR = \"undefined\";\r\nconst OBJECT_STR = \"object\";\r\nconst FN_STR = \"function\";\r\nconst ANY_STR = \"*\";\r\nconst REST_STR = \"...\";\r\n\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u7236\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_FATHER = \"##INNER_TYPE##\";\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u5B50\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_SON = \"@@INNER_TYPE@@\";\r\n\r\n/**\r\n * \u5339\u914D\u7C7B\u578B\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @param {any} type - \u671F\u671B\u7684\u7C7B\u578B\r\n * @returns {Boolean} \u662F\u5426\u5339\u914D\r\n */\r\nfunction matchType(param, type) {\r\n  if (Array.isArray(type)) {\r\n    for (let i = 0; i < type.length; i++) {\r\n      if (matchType(param, type[i])) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (typeof type !== FN_STR) {\r\n    if (\r\n      type === ANY_STR && param !== null ||\r\n      type === REST_STR ||\r\n      (type === null && param === null) ||\r\n      type === typeof param\r\n    )\r\n      return true;\r\n    return false;\r\n  }\r\n\r\n  switch (typeof param) {\r\n    case [FN_STR]:\r\n    case [OBJECT_STR]:\r\n      break;\r\n    default:\r\n      param = Object(param);\r\n      break;\r\n  }\r\n\r\n  if (param instanceof type || param === type) return true;\r\n\r\n  if (param?.[INNER_TYPE_SON]) {\r\n    return param[INNER_TYPE_SON] === type?.[INNER_TYPE_FATHER];\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6\u7C7B\u578B\u540D\u79F0\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @returns {String} \u7C7B\u578B\u540D\u79F0\r\n */\r\nfunction getTypeName(param) {\r\n  if (param === null) return \"null\";\r\n\r\n  if (param === ANY_STR) return \"(any)\";\r\n\r\n  const paramType = typeof param;\r\n\r\n  if (paramType in TYPE_NAMES) return TYPE_NAMES[paramType];\r\n\r\n  let className = (param.name || param.constructor.name || \"(unknown)\").split(\" \").pop();\r\n\r\n  [INNER_TYPE_FATHER, INNER_TYPE_SON].forEach(v => {\r\n    if (param?.[v]) {\r\n      className += `<${getTypeName(param?.[v])}>`;\r\n    }\r\n  });\r\n\r\n  if (paramType === FN_STR && className === \"anonymous\")\r\n    return \"(anonymous)\";\r\n\r\n  return className;\r\n}\r\n\r\n/**\r\n * \u629B\u51FA\u5806\u6808\u4FE1\u606F\r\n * @param {Error} err - \u9519\u8BEF\u5BF9\u8C61\r\n * @param {...any} args - \u53C2\u6570\u5217\u8868\r\n * @throws {Error}\r\n */\r\nfunction throwStackInfo(err, types, args) {\r\n  const stackList = err.stack.split(\"\\n\").splice(3);\r\n  let errorMessage = \"\";\r\n  let formattedStack = \"\\n\";\r\n  let errorMethodName = \"\";\r\n\r\n  stackList.forEach((stackLine, index, arr) => {\r\n    const parts = stackLine.trim().split(\" \");\r\n    const fullMethodName = parts.length === 3 ? parts[1] : \"(anonymous)\";\r\n    const methodName = fullMethodName.split(\".\").pop();\r\n\r\n    arr[index] = {\r\n      fullMethodName,\r\n      methodName,\r\n      link: parts.length === 3 ? parts[2] : parts[1],\r\n    };\r\n\r\n    if (!index) {\r\n      errorMethodName = methodName;\r\n    } else {\r\n      formattedStack += `${methodName}\\t${arr[index].link}\\n`;\r\n    }\r\n  });\r\n\r\n  const matchingTypes = types.find(v => v.length === args.length);\r\n\r\n  if (!matchingTypes) {\r\n    errorMessage += `The function \"${errorMethodName}\" does not have an overload that takes ${args.length} arguments.`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  let hasError = false;\r\n  matchingTypes.forEach((expectedType, i) => {\r\n    if (!matchType(args[i], expectedType)) {\r\n      const expectedTypeNames = Array.isArray(expectedType)\r\n        ? expectedType.map(getTypeName).join(\"\u3001\")\r\n        : getTypeName(expectedType);\r\n\r\n      errorMessage += `${hasError ? \"\\n\" : \"\"}Argument ${i + 1\r\n        }: Cannot convert from \"${getTypeName(\r\n          args[i]\r\n        )}\" to \"${expectedTypeNames}\".`;\r\n      hasError = true;\r\n    }\r\n  });\r\n\r\n  if (hasError) {\r\n    errorMessage = `Error calling function \"${errorMethodName}\"\\n${errorMessage}`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n\r\n/**\r\n * \u8FD4\u56DE\u4E00\u4E2A\u91CD\u8F7D\u51FD\u6570\r\n * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n */\r\nfunction createOverload() {\r\n  const TYPES = [];\r\n  const FNS = [];\r\n  let anyFn = null;\r\n\r\n  /**\r\n   * \u8C03\u7528\u515C\u5E95\u51FD\u6570\r\n   * @param  {...any} args - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function runAny(...args) {\r\n    if (anyFn) return anyFn.apply(this, args);\r\n\r\n    throwStackInfo(new Error(), TYPES, args);\r\n  }\r\n\r\n  /**\r\n   * \u91CD\u8F7D\u51FD\u6570\r\n   * @param {...any} params - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function overload(...params) {\r\n    if (!TYPES.length) return runAny.apply(this, params);\r\n\r\n    loop: for (let i = 0; i < TYPES.length; i++) {\r\n      const types = TYPES[i];\r\n\r\n      if ((types.length !== params.length && types[types.length - 1] !== REST_STR) ||\r\n        (params.length === 0 && typeof types[0] !== UNDEFINED_STR && types[0] !== REST_STR)) continue;\r\n\r\n      for (let j = 0; j < params.length; j++) {\r\n        if (!matchType(params[j], types[j] || types[types.length - 1])) continue loop;\r\n      }\r\n\r\n      return FNS[i].apply(this, params);\r\n    }\r\n\r\n    return runAny.apply(this, params);\r\n  }\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u51FD\u6570\u91CD\u8F7D\r\n   * @param {Array} types - \u53C2\u6570\u7C7B\u578B\u5217\u8868\r\n   * @param {Function} fn - \u8981\u8C03\u7528\u7684\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.add = function (types, fn) {\r\n    if (!Array.isArray(TYPES)) throw new TypeError(`\"types\" must be an array.`);\r\n\r\n    if (typeof fn !== FN_STR)\r\n      throw new TypeError(`\"fn\" must be a function.`);\r\n\r\n    for (let i = 0; i < types.length; i++) {\r\n      if (types[i] === REST_STR && i !== types.length - 1) {\r\n        throw new Error(`A \"...\" parameter must be the last parameter in a formal parameter list.`);\r\n      }\r\n    }\r\n\r\n    TYPES.forEach((key) => {\r\n      if (key.length !== types.length) return;\r\n\r\n      for (let i = 0; i < key.length; i++) {\r\n        if (key[i] !== types[i]) return;\r\n      }\r\n\r\n      throw new Error(`Function with the same signature already exists.`);\r\n    });\r\n\r\n    TYPES.forEach(type => {\r\n      const isArray = Array.isArray(type);\r\n      if (typeof type !== FN_STR && !isArray && type !== ANY_STR && type !== REST_STR) {\r\n        throw new Error(`The expected type must be Class, Array, \"*\" or the last parameter type can also be \"...\".`);\r\n      }\r\n\r\n      if (isArray) {\r\n        for (let i = 0; i < type.length; i++) {\r\n          if (\r\n            typeof type[i] !== FN_STR &&\r\n            type[i] !== null &&\r\n            type[i] !== ANY_STR\r\n          ) {\r\n            throw new Error(\r\n              `The predetermined type enumeration content must be a Class, null or \"*\".`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    TYPES.push(types);\r\n    FNS.push(fn);\r\n\r\n    return overload;\r\n  };\r\n\r\n  /**\r\n   * \u8BBE\u7F6E\u515C\u5E95\u51FD\u6570\r\n   * @param {Function} fn - \u515C\u5E95\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.any = function (fn) {\r\n    if (typeof fn !== FN_STR)\r\n      throw new TypeError(`\"fn\" must be a function.`);\r\n\r\n    if (anyFn) throw new Error(`\"any\" function is already defined.`);\r\n\r\n    anyFn = fn;\r\n\r\n    return overload;\r\n  };\r\n\r\n  return overload;\r\n}\r\n\r\nexport default createOverload()\r\n  .add([], function () {\r\n    return createOverload();\r\n  })\r\n  .add([Array, Function], function (types, fn) {\r\n    const result = createOverload();\r\n    result.add(types, fn);\r\n    return result;\r\n  });"],
  "mappings": "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",
  "names": ["TYPE_NAMES", "UNDEFINED_STR", "OBJECT_STR", "FN_STR", "ANY_STR", "REST_STR", "INNER_TYPE_FATHER", "INNER_TYPE_SON", "matchType", "param", "type", "i", "getTypeName", "paramType", "className", "v", "throwStackInfo", "err", "types", "args", "stackList", "errorMessage", "formattedStack", "errorMethodName", "stackLine", "index", "arr", "parts", "fullMethodName", "methodName", "matchingTypes", "hasError", "expectedType", "expectedTypeNames", "createOverload", "TYPES", "FNS", "anyFn", "runAny", "overload", "params", "loop", "j", "fn", "key", "isArray", "overload_default", "result"]
}
