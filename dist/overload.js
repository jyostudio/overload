var k=new Map([["number","Number"],["string","String"],["boolean","Boolean"],["symbol","Symbol"],["bigint","BigInt"],["undefined","(undefined)"]]);function E(e,o){if(Array.isArray(o)){for(let i=0;i<o.length;i++)if(E(e,o[i]))return!0;return!1}if(typeof o!="function")return o==="*"&&e!==null||o==="..."||o===null&&e===null||o===typeof e;switch(typeof e){case"function":case"object":break;default:e=Object(e);break}return e instanceof o||e===o}function A(e){if(e===null)return"null";if(e==="*")return"(any)";let o=typeof e;if(o in k)return k.get(o);let i=e.name||e.constructor.name;return o==="function"&&i==="anonymous"?"(anonymous)":i}function N(e,o){let i=new Map,h=null;function d(...r){if(h)return h.apply(this,r);$(new Error,r)}function $(r,l){let n=r.stack.split(`
`).splice(3),t="",f=`
`,g="";n.forEach((u,a,y)=>{let c=u.trim().split(" "),T=c.length===3?c[1]:"(anonymous)",m=T.split(".").pop();y[a]={fullMethodName:T,methodName:m,link:c.length===3?c[2]:c[1]},a?f+=`${m}	${y[a].link}
`:g=m});let b=Array.from(i.keys()).find(u=>u.length===l.length);if(!b)throw t+=`The function "${g}" does not have an overload that takes ${l.length} arguments.`,t+=f,new Error(t);let w=!1;if(b.forEach((u,a)=>{if(!E(l[a],u)){let y=Array.isArray(u)?u.map(A).join("\u3001"):A(u);t+=`${w?`
`:""}Argument ${a+1}: Cannot convert from "${A(l[a])}" to "${y}".`,w=!0}}),w)throw t=`Error calling function "${g}"
${t}`,t+=f,new Error(t)}function s(...r){if(!i.size)return d.apply(this,r);let l=Array.from(i.keys()).filter(n=>n.length===r.length||n[n.length-1]==="...");n:for(let n=0;n<l.length;n++){let t=l[n];for(let f=0;f<r.length;f++)if(!E(r[f],t[f]||t[t.length-1]))continue n;return i.get(t).apply(this,r)}return d.apply(this,r)}return s.add=function(r,l){if(!Array.isArray(r))throw new TypeError('"types" must be an array.');if(typeof l!="function")throw new TypeError('"fn" must be a function.');for(let n=0;n<r.length;n++)if(r[n]==="..."&&n!==r.length-1)throw new Error('A "..." parameter must be the last parameter in a formal parameter list.');return i.size&&Array.from(i.keys()).forEach(n=>{if(n.length===r.length){for(let t=0;t<n.length;t++)if(n[t]!==r[t])return;throw new Error("Function with the same signature already exists.")}}),r.forEach(n=>{let t=Array.isArray(n);if(typeof n!="function"&&!t&&n!=="*"&&n!=="...")throw new Error('The expected type must be Class, Array, "*" or the last parameter type can also be "...".');if(t){for(let f=0;f<n.length;f++)if(typeof n[f]!="function"&&n[f]!==null&&n[f]!=="*")throw new Error('The predetermined type enumeration content must be a Class, null or "*".')}}),i.set(r,l),s},s.any=function(r){if(typeof r!="function")throw new TypeError('"fn" must be a function.');if(h)throw new Error('"any" function is already defined.');return h=r,s},Array.isArray(e)&&typeof o=="function"&&s.add(e,o),s}export{N as default};
//# sourceMappingURL=overload.js.map
