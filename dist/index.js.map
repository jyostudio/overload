{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["const ANY_STR = \"*\";\r\nconst REST_STR = \"...\";\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u7236\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_FATHER = \"##INNER_TYPE##\";\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u5B50\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_SON = \"@@INNER_TYPE@@\";\r\n\r\n/**\r\n * \u5339\u914D\u7C7B\u578B\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @param {any} type - \u671F\u671B\u7684\u7C7B\u578B\r\n * @returns {Boolean} \u662F\u5426\u5339\u914D\r\n */\r\nfunction matchType(param, type) {\r\n  if (Array.isArray(type)) {\r\n    for (let i = 0; i < type.length; i++) {\r\n      if (matchType(param, type[i])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (typeof type !== \"function\") {\r\n    if (\r\n      type === ANY_STR && param !== null ||\r\n      type === REST_STR ||\r\n      (type === null && param === null) ||\r\n      type === typeof param\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  switch (typeof param) {\r\n    case \"function\":\r\n    case \"object\":\r\n      break;\r\n    case \"string\": param = String; break;\r\n    case \"number\": param = Number; break;\r\n    case \"boolean\": param = Boolean; break;\r\n    case \"symbol\": param = Symbol; break;\r\n    case \"bigint\": param = BigInt; break;\r\n    default: param = Object(param); break;\r\n  }\r\n\r\n  if (param === type || param instanceof type) {\r\n    return true;\r\n  }\r\n\r\n  if (param?.[INNER_TYPE_SON]) {\r\n    return param[INNER_TYPE_SON] === type?.[INNER_TYPE_FATHER];\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6\u7C7B\u578B\u540D\u79F0\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @returns {String} \u7C7B\u578B\u540D\u79F0\r\n */\r\nfunction getTypeName(param) {\r\n  if (param === null) {\r\n    return \"null\";\r\n  }\r\n\r\n  if (param === ANY_STR) {\r\n    return \"(\u4EFB\u610F)\";\r\n  }\r\n\r\n  const paramType = typeof param;\r\n\r\n  if (![\"function\", \"object\"].includes(paramType)) {\r\n    return paramType[0].toUpperCase() + paramType.slice(1);;\r\n  }\r\n\r\n  let className = (param?.name || param?.constructor?.name || \"(\u672A\u77E5)\").split(\" \").pop();\r\n\r\n  [INNER_TYPE_FATHER, INNER_TYPE_SON].forEach(v => {\r\n    if (param?.[v]) {\r\n      className += `<${getTypeName(param?.[v])}>`;\r\n    }\r\n  });\r\n\r\n  if (paramType === \"function\" && className === \"anonymous\") {\r\n    return \"(\u533F\u540D)\";\r\n  }\r\n\r\n  return className;\r\n}\r\n\r\n/**\r\n * \u629B\u51FA\u5806\u6808\u4FE1\u606F\r\n * @param {Error} err - \u9519\u8BEF\u5BF9\u8C61\r\n * @param {...any} args - \u53C2\u6570\u5217\u8868\r\n * @throws {Error}\r\n */\r\nfunction throwStackInfo(err, types, args) {\r\n  const stackList = err.stack.split(\"\\n\").splice(3);\r\n  let errorMessage = \"\";\r\n  let formattedStack = \"\\n\";\r\n  let errorMethodName = \"\";\r\n\r\n  stackList.forEach((stackLine, index, arr) => {\r\n    const parts = stackLine.trim().split(\" \");\r\n    const fullMethodName = parts.length === 3 ? parts[1] : `(\u533F\u540D)`;\r\n    const methodName = fullMethodName.split(\".\").pop();\r\n\r\n    arr[index] = {\r\n      fullMethodName,\r\n      methodName,\r\n      link: parts.length === 3 ? parts[2] : parts[1],\r\n    };\r\n\r\n    if (!index) {\r\n      errorMethodName = methodName;\r\n    } else {\r\n      formattedStack += `${methodName}\\t${arr[index].link}\\n`;\r\n    }\r\n  });\r\n\r\n  const matchingTypes = types.find(v => v.length === args.length);\r\n\r\n  if (!matchingTypes) {\r\n    errorMessage += `\u65B9\u6CD5 ${errorMethodName} \u4E0D\u5B58\u5728 ${args.length} \u4E2A\u53C2\u6570\u7684\u91CD\u8F7D\u3002`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  let hasError = false;\r\n  matchingTypes.forEach((expectedType, i) => {\r\n    if (!matchType(args[i], expectedType)) {\r\n      const expectedTypeNames = Array.isArray(expectedType)\r\n        ? expectedType.map(getTypeName).join(\"\u3001\")\r\n        : getTypeName(expectedType);\r\n\r\n      errorMessage += `${hasError ? \"\\n\" : \"\"}\u53C2\u6570${i + 1}\uFF1A\u9884\u671F ${expectedTypeNames} \u4F46\u5F97\u5230 ${getTypeName(args[i])}\u3002`;\r\n\r\n      hasError = true;\r\n    }\r\n  });\r\n\r\n  if (hasError) {\r\n    errorMessage = `\u65B9\u6CD5 ${errorMethodName} \u8C03\u7528\u9519\u8BEF\\n${errorMessage}`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n\r\n/**\r\n * \u8FD4\u56DE\u4E00\u4E2A\u91CD\u8F7D\u51FD\u6570\r\n * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n */\r\nfunction createOverload() {\r\n  const TYPES = [];\r\n  const FNS = [];\r\n  const OPTIONS = [];\r\n  let anyFn = null;\r\n\r\n  /**\r\n   * \u8C03\u7528\u515C\u5E95\u51FD\u6570\r\n   * @param  {...any} args - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function runAny(...args) {\r\n    if (anyFn) {\r\n      return anyFn.apply(this, args);\r\n    }\r\n\r\n    throwStackInfo(new Error(), TYPES, args);\r\n  }\r\n\r\n  /**\r\n   * \u91CD\u8F7D\u51FD\u6570\r\n   * @param {...any} params - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function overload(...params) {\r\n    if (!TYPES.length) {\r\n      return runAny.apply(this, params);\r\n    }\r\n\r\n    const paramsLength = params.length;\r\n\r\n    loop: for (let i = 0; i < TYPES.length; i++) {\r\n      const types = TYPES[i];\r\n      const options = OPTIONS[i];\r\n      const typesLength = types.length;\r\n\r\n      if ((options.length !== paramsLength && !options.rest) ||\r\n        (paramsLength === 0 && typesLength && types[0] !== REST_STR)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 0; j < paramsLength; j++) {\r\n        const type = types[j] || types[typesLength - 1];\r\n        if (!matchType(params[j], type)) {\r\n          try {\r\n            const convert = type?.[\"\u21C4\"]?.(params[j]);\r\n            if (matchType(convert, type)) {\r\n              params[j] = convert;\r\n              continue;\r\n            }\r\n          } catch { }\r\n          continue loop;\r\n        }\r\n      }\r\n\r\n      return FNS[i].apply(this, params);\r\n    }\r\n\r\n    return runAny.apply(this, params);\r\n  }\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u51FD\u6570\u91CD\u8F7D\r\n   * @param {Array} types - \u53C2\u6570\u7C7B\u578B\u5217\u8868\r\n   * @param {Function} fn - \u8981\u8C03\u7528\u7684\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.add = function (types, fn) {\r\n    if (!Array.isArray(TYPES)) {\r\n      throw new TypeError(\"types \u5FC5\u987B\u662F\u6570\u7EC4\u3002\");\r\n    }\r\n\r\n    if (typeof fn !== \"function\") {\r\n      throw new TypeError(\"fn \u5FC5\u987B\u662F\u51FD\u6570\u3002\");\r\n    }\r\n\r\n    for (let i = 0; i < types.length; i++) {\r\n      if (types[i] === REST_STR && i !== types.length - 1) {\r\n        throw new SyntaxError(`${REST_STR} \u5FC5\u987B\u662F\u6700\u540E\u4E00\u4E2A\u53C2\u6570\u3002`);\r\n      }\r\n    }\r\n\r\n    TYPES.forEach((key) => {\r\n      if (key.length !== types.length) {\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < key.length; i++) {\r\n        if (key[i] !== types[i]) return;\r\n      }\r\n\r\n      throw new Error(\"\u5DF2\u5B58\u5728\u6B64\u7B7E\u540D\u7684\u91CD\u8F7D\u3002\");\r\n    });\r\n\r\n    TYPES.forEach(type => {\r\n      const isArray = Array.isArray(type);\r\n      if (typeof type !== \"function\" && !isArray && type !== ANY_STR && type !== REST_STR) {\r\n        throw new TypeError(`\u671F\u671B\u7C7B\u578B\u4E3A Class\u3001Array\u3001${ANY_STR} \u6216\u672B\u5C3E\u53C2\u6570\u4E5F\u53EF\u4EE5\u662F ${REST_STR}\u3002`);\r\n      }\r\n\r\n      if (isArray) {\r\n        for (let i = 0; i < type.length; i++) {\r\n          const typeofStr = typeof type[i];\r\n          if (\r\n            typeofStr !== \"function\" &&\r\n            !(typeofStr === \"object\" && typeof type[i]?.constructor === \"function\") &&\r\n            type[i] !== null &&\r\n            type[i] !== ANY_STR\r\n          ) {\r\n            throw new TypeError(`\u7C7B\u578B\u5FC5\u987B\u4E3A Class\u3001null \u6216 ${ANY_STR}\u3002`);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    TYPES.push(types);\r\n    FNS.push(fn);\r\n    OPTIONS.push({\r\n      length: types.length,\r\n      rest: types[types.length - 1] === REST_STR,\r\n    });\r\n\r\n    return overload;\r\n  };\r\n\r\n  /**\r\n   * \u8BBE\u7F6E\u515C\u5E95\u51FD\u6570\r\n   * @param {Function} fn - \u515C\u5E95\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.any = function (fn) {\r\n    if (anyFn) {\r\n      throw new Error(\"any \u51FD\u6570\u5DF2\u5B58\u5728\u3002\");\r\n    }\r\n\r\n    if (typeof fn !== \"function\") {\r\n      throw new TypeError(\"fn \u5FC5\u987B\u662F\u51FD\u6570\u3002\");\r\n    }\r\n\r\n    anyFn = fn;\r\n\r\n    return overload;\r\n  };\r\n\r\n  return overload;\r\n}\r\n\r\nexport default createOverload()\r\n  .add([], function () {\r\n    return createOverload();\r\n  })\r\n  .add([Array, Function], function (types, fn) {\r\n    const result = createOverload();\r\n    result.add(types, fn);\r\n    return result;\r\n  });"],
  "mappings": "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",
  "names": ["ANY_STR", "REST_STR", "INNER_TYPE_FATHER", "INNER_TYPE_SON", "matchType", "param", "type", "getTypeName", "paramType", "className", "v", "throwStackInfo", "err", "types", "args", "stackList", "errorMessage", "formattedStack", "errorMethodName", "stackLine", "index", "arr", "parts", "fullMethodName", "methodName", "matchingTypes", "hasError", "expectedType", "i", "expectedTypeNames", "createOverload", "TYPES", "FNS", "OPTIONS", "anyFn", "runAny", "overload", "params", "paramsLength", "loop", "options", "typesLength", "j", "convert", "fn", "key", "isArray", "typeofStr", "src_default", "result"]
}
